{"version":3,"sources":["components/NavigationBar/NavigationBar.module.css","App.js","components/NavigationBar/NavigationBar.jsx","serviceWorker.js","index.js"],"names":["module","exports","header","home-page","logo","header-menu","menu-item","home-page-wrapper","header-mobile-menu","active","open","mobile-hamburger-button","isMobile","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","phoneClick","findDOMNode","menu","phoneOpen","state","setState","bind","assertThisInitialized","esm_extends","dataSource","navBarChildren","title","to","map","item","react_default","a","createElement","className","styles","href","classNames","src","index_es","onClick","color","burger","marginTop","marginBottom","React","Component","enquireScreen","b","location","window","App","show","port","_this2","setTimeout","_this3","children","NavigationBar","id","key","style","height","ref","d","dom","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc54c49a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"NavigationBar_header__2vBcF\",\"home-page\":\"NavigationBar_home-page__3YrAv\",\"logo\":\"NavigationBar_logo__3E3AI\",\"header-menu\":\"NavigationBar_header-menu__3HGX5\",\"menu-item\":\"NavigationBar_menu-item__1LmYE\",\"home-page-wrapper\":\"NavigationBar_home-page-wrapper__16XI-\",\"header-mobile-menu\":\"NavigationBar_header-mobile-menu__18BPC\",\"active\":\"NavigationBar_active__1wtEr\",\"open\":\"NavigationBar_open__z44bw\",\"mobile-hamburger-button\":\"NavigationBar_mobile-hamburger-button__VUuyY\"};","import React, { Component } from 'react';\nimport NavBar from './components/NavigationBar/NavigationBar';\nimport { enquireScreen } from 'enquire-js';\n\nlet isMobile;\n\nenquireScreen((b) => {\n  isMobile = b;\n});\n\nconst { location } = window;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMobile,\n      show: !location.port,\n    }\n  }\n\n  componentDidMount() {\n    //detects if \n    enquireScreen((b) => {\n      this.setState({ isMobile: !!b });\n    });\n    if (location.port) {\n      // 样式 build 时间在 200-300ms 之间;\n      setTimeout(() => {\n        this.setState({\n          show: true,\n        });\n      }, 500);\n    }\n  }\n  render() {\n\n    const content = {\n      children: [\n        { title: \"Navigation One\", to: \"nav_01\" },\n        { title: \"Navigation Two\", to: \"nav_02\" },\n        { title: \"Navigation Three\", to: \"nav_03\" },\n        { title: \"Navigation Four\", to: \"nav_04\" },\n      ]\n    }\n\n    const children = [\n      <NavBar\n        id=\"navbar\"\n        key=\"navbar\"\n        isMobile={this.state.isMobile}\n      />,\n      content.children.map(item => {\n        return <div id={item.to} style={{ height: 1000 }}>{item.title}</div>\n      })\n\n    ]\n    return (\n      <div\n        className=\"templates-wrapper\"\n        ref={(d) => {\n          this.dom = d;\n        }}\n      >\n        {this.state.show && children}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\nimport { Link } from 'rc-scroll-anim';\r\nimport styles from './NavigationBar.module.css';\r\nimport classNames from 'classnames';\r\nimport Burger from 'react-css-burger';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phoneOpen: false,\r\n        };\r\n        this.phoneClick = this.phoneClick.bind(this);\r\n\r\n    }\r\n\r\n    phoneClick = () => {\r\n        const menu = findDOMNode(this.menu);\r\n        const phoneOpen = !this.state.phoneOpen;\r\n        this.setState({\r\n            phoneOpen,\r\n            // menuHeight: phoneOpen ? menu.scrollHeight : 0,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        // return <div className={styles.header}>Test2</div>\r\n        const { ...props } = this.props;\r\n        const { isMobile } = props;\r\n        delete props.dataSource;\r\n        delete props.isMobile;\r\n        const { phoneOpen } = this.state;\r\n\r\n        const navBarData = {\r\n            children: [\r\n                { title: \"Navigation One\", to: \"nav_01\" },\r\n                { title: \"Navigation Two\", to: \"nav_02\" },\r\n                { title: \"Navigation Three\", to: \"nav_03\" },\r\n                { title: \"Navigation Four\", to: \"nav_04\" },\r\n            ]\r\n        }\r\n\r\n        const navBarChildren = navBarData.children.map(item => {\r\n            return <li className={styles['menu-item']}><a href={\"#\" + item.to}>{item.title}</a></li>\r\n        })\r\n\r\n        return (\r\n            <header className={classNames(styles['header'], styles['home-page-wrapper'])}>\r\n                <div className={classNames(styles['home-page-wrapper'], styles['home-page'], { open: phoneOpen })}>\r\n\r\n                    <div className={styles['logo']}>\r\n                        <img src=\"https://gw.alipayobjects.com/os/s/prod/seeconf/9b458a789d9a000312899b42a7542b9c.svg\" />\r\n                    </div>\r\n\r\n                    {isMobile &&\r\n                        <div\r\n                            className={styles['mobile-hamburger-button']}\r\n                        ><Burger\r\n                            active={phoneOpen}\r\n                            onClick={this.phoneClick}\r\n                            color=\"white\"\r\n                            burger=\"vortex\"\r\n                            marginTop=\"18px\"\r\n                            marginBottom=\"25px\"\r\n                            >\r\n                            </Burger>\r\n                        </div>\r\n                    }\r\n                    {!isMobile && <div\r\n                        className={styles['header-menu']}>\r\n                        {navBarChildren}\r\n                    </div>}\r\n\r\n                </div>\r\n                {phoneOpen && <div className={classNames(styles['home-page'], styles['header-mobile-menu'], {open: phoneOpen})}>\r\n                    {navBarChildren}\r\n\r\n                </div>\r\n                }\r\n\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'babel-polyfill';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}